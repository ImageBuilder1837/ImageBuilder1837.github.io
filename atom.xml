<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Image Builder</title>
  
  <subtitle>image_builder&#39;s blog</subtitle>
  <link href="https://image-builder-1837.github.io/atom.xml" rel="self"/>
  
  <link href="https://image-builder-1837.github.io/"/>
  <updated>2023-12-05T09:28:53.745Z</updated>
  <id>https://image-builder-1837.github.io/</id>
  
  <author>
    <name>image_builder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建个人博客（下）</title>
    <link href="https://image-builder-1837.github.io/2023/12/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://image-builder-1837.github.io/2023/12/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2023-12-04T13:53:40.000Z</published>
    <updated>2023-12-05T09:28:53.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客（下）"><a href="#搭建个人博客（下）" class="headerlink" title="搭建个人博客（下）"></a>搭建个人博客（下）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客主要分享了我一路把Hexo博客搭到能用的流程，看着就像一篇正经介绍的教程。这其实是因为截至上篇结尾我都是顺风顺水地跟着大佬们的文章走的。但这回就得好好介绍介绍我被<a href="https://github.com/esappear/hexo-theme-clover">clover</a>狠狠拷打的故事了。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>不介意的话Hexo默认的landscape也不是不行，但我在翻阅<a href="https://juejin.cn/post/7053744641383874574">一篇掘金的主题推荐</a>时被clover狠狠地吸引了。</p><p>好，既然选定了主题，那就赶紧整起来！</p><p>跟着clover主题的 <code>README.md</code>一步步走：</p><pre><code class="shell">git clone https://github.com/esappear/hexo-theme-clover themes/clovernpm install hexo-renderer-sass --save</code></pre><p>改一下根目录的 <code>_config.yml</code>：</p><pre><code class="yaml">theme: cloverhighlight:  enable: false</code></pre><p>把几个主界面的文件创建好：</p><pre><code class="shell">hexo new page &quot;tags&quot;</code></pre><pre><code class="yaml">---layout: tagtitle: tags---</code></pre><pre><code class="shell">hexo new page &quot;categories&quot;</code></pre><pre><code class="yaml">---layout: categorytitle: categories---</code></pre><pre><code class="shell">hexo new page &quot;about&quot;</code></pre><pre><code class="yaml">---layout: abouttitle: about---</code></pre><p>Generate!</p><pre><code class="shell">ERROR ReferenceError: _ is not defined</code></pre><p>啊？</p><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><p>我看着报错信息，大脑宕机了一瞬间。不过既然出问题了，那就去GitHub上翻翻issue。一看，<a href="https://github.com/esappear/hexo-theme-clover/issues/22">最新的issue</a>提到的就是这个问题：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125084104945.png" alt="2023125084104945.png"></p><p>好家伙，都是三年前的issue了，看看解决了没：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/202312508583120.jpeg" alt="202312508583120.jpeg"></p><p>行吧，看来只能自己动手丰衣足食了。</p><h2 id="修bug"><a href="#修bug" class="headerlink" title="修bug"></a>修bug</h2><p>叠个甲，我此前几乎完全没有Javascript基础，所有相关知识都是现学现卖，解决方法可能又莽又蠢，大佬们轻点喷😫</p><h3 id="一把梭"><a href="#一把梭" class="headerlink" title="一把梭"></a>一把梭</h3><p>再看一眼报错信息：</p><pre><code class="shell">ERROR ReferenceError: _ is not defined</code></pre><p>这个报错在 <code>layout</code>文件夹下的 <code>archive.ejs</code>、<code>category.ejs</code>、<code>tag.ejs</code>，以及 <code>layout/_partial</code>里的 <code>footer.ejs</code>、<code>nav.ejs</code>都有发生。看起来是一个变量未定义的问题，先去找找这个下划线是何方神圣。一路找到 <code>scripts/home.js</code>里：</p><pre><code class="javascript">&#39;use strict&#39;;var pagination = require(&#39;hexo-pagination&#39;);var assign = require(&#39;object-assign&#39;);var _ = require(&#39;lodash&#39;);</code></pre><p>看起来这个下划线本来应该是一个叫lodash的导入的库，但不知道为什么这些ejs模板没办法使用这个变量，有大佬知道而且不嫌麻烦的话可以发邮件给我这个小白科普一下（谢谢！）我本着最简单直接的想法（未定义就再给它定义上）在所有报错的文件开头都加了一句：</p><pre><code class="javascript">var _ = require(&#39;lodash&#39;);</code></pre><p>再跑一遍试试：</p><pre><code class="shell">ERROR ReferenceError: require is not defined</code></pre><p>看来是我想得太简单了。</p><h3 id="一点Javascript历史"><a href="#一点Javascript历史" class="headerlink" title="一点Javascript历史"></a>一点Javascript历史</h3><p>话说require是Javascript中的导入函数，直觉上这类函数应该是语言本身的内置函数，怎么会未定义呢？我去网上翻了翻，发现这似乎与Javascript作为浏览器脚本语言的定位有关。</p><p>根据<a href="https://www.cnblogs.com/libin-1/p/7127481.html">这篇博客园的文章</a>，Javascript并不是一种模块化编程语言，在es6之前它是不支持类（class）的，自然也没有模块一说。2009年，美国程序员Ryan Dahl创立了Nodejs项目，将Javascript语言用于服务器端编程。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。Nodejs使用了CommonJS规范来实现模块化编程，require就是其中加载模块的全局性方法。</p><p>但Hexo不就是基于Nodejs环境的吗，怎么会用不了require呢？</p><p>我又找到了<a href="https://blog.csdn.net/qq_38977714/article/details/117252524">一篇文章</a>，似乎是因为在Nodejs大版本14以上，require作为CommonJS的一个命令已经不支持直接使用了。文章也给出了解决方法：</p><pre><code class="javascript">import &#123; createRequire &#125; from &#39;module&#39;;const require = createRequire(import.meta.url);</code></pre><p>试试：</p><pre><code class="shell">ERROR SyntaxError: Cannot use import statement outside a module while compiling ejs</code></pre><p>这回网上的解决方法有两种：</p><ol><li>使用 <code>.mjs </code>后缀名</li><li>在 <code>package.json</code>中加入 <code>&quot;type&quot;: &quot;module&quot;</code></li></ol><p>发生问题的是ejs模板文件，第一种方法肯定不能采用了；第二种方法经尝试仍然会报错。</p><p>那把Nodejs降级到14以下的版本呢？</p><p>我下载了12.22.12版本的Nodejs进行覆盖安装。需要注意的是，用户目录 <code>AppData</code>下 <code>Local</code>和 <code>Roaming</code>中的缓存文件夹 <code>npm</code>、<code>npm-cache</code>以及 <code>node-gyp</code>需要手动删除以防版本冲突。</p><p>结果还是失败了，无论是require还是import都会报错。</p><p>这下思路断了。</p><h3 id="no-lodash"><a href="#no-lodash" class="headerlink" title="no-lodash"></a>no-lodash</h3><p>我开始失意地翻阅<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>，在“变量”一节找到了这样一句话：</p><blockquote><p>从 Hexo 5.0.0 开始，Lodash 已从全局变量中移除。迁移时 <a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore">You-Dont-Need-Lodash-Underscore</a> 或许能为你提供帮助。</p></blockquote><p>简而言之就是：既然用不了lodash，那就把所有lodash的函数全换掉。</p><p>不错！有够简单粗暴的！</p><p>接下来就是找出所有下划线并一个个换成等效函数的体力活了。不过这个项目中提供的都是只适用于数组的方法，object相关的替换我是自己用for循环写的。于是lodash被我彻底踢出了这个主题。</p><h3 id="一个小插曲"><a href="#一个小插曲" class="headerlink" title="一个小插曲"></a>一个小插曲</h3><p>Generate!</p><pre><code class="shell">Error: Unknown output style &quot;nested&quot;</code></pre><p>找到主题文件夹下的 <code>_config.yml</code>，把 <code>node_sass</code>下的 <code>outputStyle</code>属性删掉就行了。</p><p>至此，bug fix的环节算是告一段落了，我也把修改的部分提交了<a href="https://github.com/esappear/hexo-theme-clover/pull/23">一个PR</a>，希望能被merge吧。</p><h2 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h2><p>clover是<a href="https://esappear.github.io/clover/">Clover Tuan</a>太太编写的，但是并没有注明使用的开源许可证，所以如果太太您在看并且觉得我这么擅自改动不合适的话请发邮件告诉我，我会马上改的！</p><h3 id="首页图标"><a href="#首页图标" class="headerlink" title="首页图标"></a>首页图标</h3><p>太太在首页展示的默认图标有Dribbble、Behance、Lofter、Instagram以及GitHub。那如果我想加点别的图标该怎么办？不如说这个首页图标究竟是怎么回事？</p><p>既然搞不懂，就去看看这究竟是怎么实现的。我直接简单粗暴地拿元素选择器框中了GitHub图标：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125135656497.png" alt="2023125135656497.png"></p><p>居然不是图片？逐一查看和它相关的css，发现玄机藏在 <code>source/css/font.scss</code>中：</p><pre><code class="scss">@font-face &#123;  font-family: &#39;iconfont&#39;;  /* project id 861369 */  src: url(&#39;//at.alicdn.com/t/font_861369_9voy0xmnmvl.eot&#39;);  src: url(&#39;//at.alicdn.com/t/font_861369_9voy0xmnmvl.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),  url(&#39;//at.alicdn.com/t/font_861369_9voy0xmnmvl.woff&#39;) format(&#39;woff&#39;),  url(&#39;//at.alicdn.com/t/font_861369_9voy0xmnmvl.ttf&#39;) format(&#39;truetype&#39;),  url(&#39;//at.alicdn.com/t/font_861369_9voy0xmnmvl.svg#iconfont&#39;) format(&#39;svg&#39;);&#125;.iconfont&#123;  font-family:&quot;iconfont&quot; !important;  font-size:16px;font-style:normal;  -webkit-font-smoothing: antialiased;  -webkit-text-stroke-width: 0.2px;  -moz-osx-font-smoothing: grayscale;  &amp;.icon-behance::before &#123;    content: &#39;\e919&#39;;  &#125;  &amp;.icon-lofter::before &#123;    content: &#39;\e63c&#39;;  &#125;  &amp;.icon-instagram::before &#123;    content: &#39;\e626&#39;;  &#125;  &amp;.icon-dribbble::before &#123;    content: &#39;\e6c3&#39;;  &#125;  &amp;.icon-github::before &#123;    content: &#39;\e799&#39;;  &#125;  &amp;.icon-arrow-left::before &#123;    content: &#39;\e91a&#39;;  &#125;  &amp;.icon-arrow-right::before &#123;    content: &#39;\e636&#39;;  &#125;&#125;</code></pre><p>经过一番搜索，我大致明白了原理：通过引用字体图标文件，让特定Unicode字符显示为图标的样子。</p><p>明白了原理就可以开始动手了。找图标可以用阿里的在线字体图标服务<a href="https://www.iconfont.cn/">iconfont矢量图标库</a>，只要不商用一般也不会牵扯到版权问题。</p><p>先注册一个账号，然后可以搜索自己需要的图标（因为太太的代码原因，请选择名称全小写的图标），添加入库：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125145725908.png" alt="2023125145725908.png"></p><p>挑选完图标之后，点击网站右上角带红点的购物车，选择添加至项目（没有项目可以新建一个）：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125172010904.png" alt="2023125172010904.png"></p><p>此时会自动跳转到项目里面，点击“查看在线链接”并生成代码：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125151243912.png" alt="2023125151243912.png"></p><p>记下每一个图标的Unicode编号，可以点击“编辑”查看：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125151929908.png" alt="2023125151929908.png"></p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125152037907.png" alt="2023125152037907.png"></p><p>用生成的代码替换掉原来 <code>source/css/font.scss</code>中的部分，每个图标也照葫芦画瓢地写如下一段：</p><pre><code class="scss">  &amp;.icon-ICONNAME::before &#123;    content: &#39;\ICONUNICODE&#39;;  &#125;</code></pre><p>我的替换如下：</p><pre><code class="scss">@font-face &#123;  font-family: &#39;iconfont&#39;;  /* Project id 4356364 */  src: url(&#39;//at.alicdn.com/t/c/font_4356364_82dhsvzbmln.woff2?t=1701695612820&#39;) format(&#39;woff2&#39;),       url(&#39;//at.alicdn.com/t/c/font_4356364_82dhsvzbmln.woff?t=1701695612820&#39;) format(&#39;woff&#39;),       url(&#39;//at.alicdn.com/t/c/font_4356364_82dhsvzbmln.ttf?t=1701695612820&#39;) format(&#39;truetype&#39;);&#125;.iconfont&#123;  font-family:&quot;iconfont&quot; !important;  font-size:16px;font-style:normal;  -webkit-font-smoothing: antialiased;  -webkit-text-stroke-width: 0.2px;  -moz-osx-font-smoothing: grayscale;  &amp;.icon-bilibili::before &#123;    content: &#39;\e600&#39;;  &#125;  &amp;.icon-github::before &#123;    content: &#39;\e799&#39;;  &#125;  &amp;.icon-rss::before &#123;    content: &#39;\e6d0&#39;;  &#125;  &amp;.icon-arrow-left::before &#123;    content: &#39;\e75b&#39;;  &#125;  &amp;.icon-arrow-right::before &#123;    content: &#39;\e75c&#39;;  &#125;&#125;</code></pre><p>来到主题文件夹下的 <code>_config.yml</code>，修改social部分的属性值：</p><pre><code class="yaml">social:  bilibili: https://space.bilibili.com/366719977  GitHub: https://github.com/image-builder-1837  RSS: /atom.xml</code></pre><p>看看效果：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125153237900.png" alt="2023125153237900.png"></p><p>Done!</p><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>个人博客怎么能不支持RSS呢？好在Hexo配置RSS也不复杂，首先下载生成RSS的插件：</p><pre><code class="shell">npm install hexo-generator-feed --save</code></pre><p>在根目录下的 <code>_config.yml</code>配置：</p><pre><code class="yaml"># Extensionsplugins:  hexo-generator-feed#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20</code></pre><p>在主题文件夹下的 <code>_config.yml</code>配置：</p><pre><code class="yaml"># RSSrss: /atom.xml</code></pre><p>这样就会在网站的 <code>/atom.xml</code>下生成RSS订阅了（不知道为什么这里是乱码，我尝试在阅读器里打开是正常的）：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023125154425911.jpeg" alt="2023125154425911.jpeg"></p><p>可以在首页也加一个RSS的图标，具体的写法可以往上翻翻。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>剩下的都是些微不足道的小改动，比如增加mail发送链接啦，增加copyright跳转链接什么的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>嗷嗷嗷终于写完了！单论个人博客的搭建其实并没有很复杂，主要是我选主题的问题（</p><p>咳咳，虽然搞七搞八地配置一大通确实挺麻烦，但完成的时候简直成就感爆棚！而且这几天搭博客也学到了一些奇奇怪怪的知识，比如在GitHub merge PR的时候要记得squash &amp; merge而不是直接merge（会让commit history变丑的！），又或者是一段关于Javascript模块化编程的历史等等。试想刚开始搭博客时怎么想到能扯到这些方面？也算是意料外的收获吧。</p>]]></content>
    
    
    <summary type="html">clover主题那些事儿</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建个人博客（上）</title>
    <link href="https://image-builder-1837.github.io/2023/12/03/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://image-builder-1837.github.io/2023/12/03/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2023-12-03T08:53:29.000Z</published>
    <updated>2023-12-03T13:37:53.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客（上）"><a href="#搭建个人博客（上）" class="headerlink" title="搭建个人博客（上）"></a>搭建个人博客（上）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>“要搭个人博客！”这个想法我也不太清楚具体是什么时候出现的，大概是看了诸多大佬的博客之后就自然而然地想要效仿吧。总之，借着一个奇怪的契机（K佬：去搭一个博客 我：好嘞），也是正式开始整博客了。作为我的第一篇博客，就讲讲我搭博客的过程以及遇到的一些小麻烦吧。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>在怎么搭个人博客这个问题上，我考虑过三种整法：</p><ol><li>在现有的博客平台（如CSDN、博客园等）上写</li><li>用博客框架写，部署在GitHub Pages上</li><li>用博客框架写，部署在云服务器上</li></ol><p>考虑了一下，如果要搭个人博客，我更喜欢自己能够定制整个页面，况且本人对CSDN等的好感度一直都挺低的，于是方案一被直接抛弃了；方案三需要我掏钱买一台暂时还没有别的用处的仅仅用来搭博客的云服务器以及一个域名，虽然有一台自己的服务器和一个自己的域名实在是酷毙了，但我的钱包还是让我放弃了方案三。最终我选择了折中的方案二，也就是广受欢迎的Hexo+GitHub Pages建站。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>博客，启动！</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>安装Hexo需要Nodejs环境，先去<a href="https://nodejs.org/">Nodejs官网</a>下载安装包。一般来说会有LTS和Current两个版本，LTS全称是Long Term Support，也就是长期支持版本，相对会更稳定且不容易出bug，所以正常情况下载LTS版本就行了。安装过程就是一路无脑Next，安装完后可以在cmd中运行以下两个命令验证是否安装成功：</p><pre><code class="shell">node -vnpm -v# 如果都输出版本号就是安装成功了</code></pre><p>接下来安装Hexo：</p><pre><code class="shell">npm install -g hexo-cli    # -g指全局安装，局部安装可以运行npm install hexo</code></pre><p>验证安装成功：</p><pre><code class="shell">hexo v    # 输出Hexo以及依赖包的版本</code></pre><p>准备一个用来存放博客文件的空文件夹，在这个文件夹中打开cmd并运行：</p><pre><code class="shell">hexo init    # 博客目录的初始化npm install    # 安装博客需要的包</code></pre><p>这个时候文件夹中应该多出了一大堆乱七八糟的文件和文件夹。太棒了，已经初始化好了！来看看Hexo官方送我们的新手大礼包是什么样的吧：</p><pre><code class="shell">hexo g    # 从你写的博客中生成静态网页文件，以后每次更新完博客都要运行一遍hexo s    # 在本地localhost:4000生成预览</code></pre><p>在浏览器中访问 <code>localhost:4000</code>：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/2023123190147976.png" alt="2023123190147976.png"></p><p>Hello Hexo!</p><h3 id="Git-GitHub"><a href="#Git-GitHub" class="headerlink" title="Git &amp; GitHub"></a>Git &amp; GitHub</h3><p>我在搭博客之前就已经在使用这个游戏存档工具和最佳菜谱网站了，如果没安装Git或者没有GitHub账号的话可以参考网上各位大佬们的教程（我真懒）</p><p>装完Git以及注册完GitHub账号之后，需要新建一个仓库（repository），并取名叫 <code>USERNAME.github.io</code>（USERNAME就是你在GitHub的账号名）这个名字具有特殊意义，GitHub会把这个仓库里的文件作为网站文件建站，可以通过 <code>https://USERNAME.github.io</code>访问。</p><p>值得一提的是，许多教程中提到需要配置GitHub SSH key，但那其实是通过SSH连接GitHub才必要的步骤，如果在等会讲到的Hexo配置文件中使用HTTPS连接就可以省去这个步骤。我嘛，因为<a href="https://github.com/BeyondDimension/SteamTools/releases/tag/3.0.0-rc.2">Watt Toolkit 3.0.0-rc.2</a>在代理GitHub时并没有处理22端口，不停止加速就无法使用SSH连接，于是我毫不犹豫地选择了HTTPS连接。</p><h3 id="Hexo-Git-GitHub"><a href="#Hexo-Git-GitHub" class="headerlink" title="Hexo+Git+GitHub"></a>Hexo+Git+GitHub</h3><p>在博客的文件夹下有个叫做 <code>_config.yml</code>的文件，是整个博客的配置文件。不过现在需要它做的暂时只是让它告诉Hexo用什么方式（Git）把博客放到哪里（Github）去。随便用什么文字编辑器打开它，保证当中有这么几行：</p><pre><code class="yaml">deploy:  type: git  repo: https://github.com/USERNAME/USERNAME.github.io.git  branch: main</code></pre><p>当然也可以选择用SSH而不是HTTPS的方式连接Github，需要把repo属性改成 <code>git@github.com:USERNAME/USERNAME.github.io.git</code>以及配置Github SSH key，详情请见网上各大佬的文章（懒开二度）</p><p>接下来装能让Hexo通过Git部署博客的插件：</p><pre><code class="shell">npm install hexo-deployer-git --save</code></pre><p>部署！</p><pre><code class="shell">hexo d</code></pre><p>去 <code>https://USERNAME.github.io</code>看看：</p><p><img src="https://raw.githubusercontent.com/image-builder-1837/ImageHost/main/20231231927426.png" alt="20231231927426.png"></p><p>Hello GitHub Hexo!</p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>第一步的搭建已经完成了，该回头看看究竟发生什么了。首先要看的就是根目录下的 <code>_config.yml</code>这个配置文件。</p><p><code>.yml</code>扩展名的文件使用的是YAML语言，因其能清晰地表达层次结构，常用于书写配置文件。YAML的语法并不复杂，只需要10分钟左右就足以掌握其大致用法。</p><p>了解大致用法之后，就可以正式看看 <code>_config.yml</code>里面都塞了些什么了。完整的配置选项可以在<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官方文档</a>的“配置”一节中查看，下面是一些我的常用配置选项：</p><pre><code class="yaml">title: Image Builder    # 网站标题，就是显示在标签页上的文字subtitle: image_builder&#39;s blog    # 副标题description: image_builder&#39;s blog    # 简介，主要是给搜索引擎看的keywords: CTF web    # 关键词author: image_builder    # 作者名字language: default    # 网站语言，这个需要根据主题灵活调整timezone: Asia/Shanghai    # 时区，中国大陆填Asia/Shanghai就行url: https://image-builder-1837.github.io    # 网站网址theme: clover    # 网站主题</code></pre><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Hexo创建的博客文件默认使用Markdown语法书写，这年头不会Markdown真的还算编程人吗（暴论）</p><p>调侃归调侃，Markdown最大的特点就是将样式融合进了文本之中，这使得书写Markdown时并非像Word那样需要用鼠标一个个选中调整，而是双手不离开键盘就能同时完成书写和排版。如今无论是GitHub的 <code>README.md</code>或是大部分笔记软件如Obsidian、Typora、trilium等都使用Markdown语法，这值得每个希望能集中精神码字的人学习。</p><h3 id="子文件夹"><a href="#子文件夹" class="headerlink" title="子文件夹"></a>子文件夹</h3><p>在正式开始写博客之前，大致了解一下博客文件夹中几个子文件夹的作用有助于理解Hexo的工作方式。</p><ul><li>node_modules：存放Nodejs的一些包</li><li>public：<code>hexo g</code>生成的静态网页文件都放在这里，<code>hexo d</code>也是把这个文件夹发送给GitHub</li><li>scaffolds：等会的博客文件都是用这里面的模板生成的</li><li>source：博客、主页、归档、关于等页面文件存放的位置</li><li>themes：放主题的地方</li></ul><h3 id="New"><a href="#New" class="headerlink" title="New!"></a>New!</h3><p>来生成一篇新博客！</p><pre><code class="shell">hexo new &quot;Title&quot;</code></pre><p>Hexo有默认有三种模板：</p><ul><li>post：默认模板，用于生成博客</li><li>page：用来生成一些诸如主页、归档、关于等非博客页面文件</li><li>draft：草稿，感觉没啥用</li></ul><p>默认使用post模板，这个例子中会用 <code>scaffolds/post.md</code>在 <code>source/_posts </code>下生成 <code>Title.md</code>。如果你要生成“关于”页面：</p><pre><code class="shell">hexo new page &quot;About&quot;</code></pre><p>就会用 <code>scaffolds/page.md</code>在 <code>source/About</code>下生成 <code>index.md</code>。</p><p>接下来就可以用你喜欢的Markdown编辑器<del>（比如VSCode）</del>打开 <code>Title.md</code>进行写作了。写完依旧是 <code>hexo g</code>加 <code>hexo s</code>预览，<code>hexo d</code>部署，就不在此赘述了。</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>有时在博客中需要引用图片，一种简单直接的做法就是把图片放在 <code>source</code>文件夹下通过相对路径引用。但这种做法在图片数量越来越多的情况下会狠狠地拖慢网站的加载速度。所以可以选择把图片上传到图床里并使用Markdown图片语法 <code>![ImageName](ImageLink)</code>来引用。所谓的图床就是见网上大佬的科普（三回啊三回）</p><p>其实也可以专门建一个GitHub仓库充当图床，我就是这么干的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，Hexo的搭建以及基本使用都已经讲完了，下回该讲讲让我博客拖了整整三天才完成的罪魁祸首——主题了🥶</p>]]></content>
    
    
    <summary type="html">使用Hexo+GitHub Pages搭建个人博客</summary>
    
    
    
    
  </entry>
  
</feed>
